Lab 2 - MapReduce/Hadoop
Alex Zaharia

1. Request count for each URL path, sorted by request count (ascending)
    - Run Command: ./gradlew run --args="1 input_access_log 1"
    - Map Phase: Each line of input data is processed by extracting the URL and emitting a key-value pair
      where the URL is the key and a constant value of 1 is paired with it.
            - The input is the access log. The output is a list of key value pairs <URL, 1>.
    - Reduce Phase: During this phase, the key-value pairs generated by the Map phase are grouped by URL,
      and the reduce function calculates the sum of values associated with each URL, resulting in a
      total count for each unique URL.
            - The input is the key value pairs <URL, 1>. The output is the key value pairs <URL, count>.
    - Cleanup Phase: After the reduce phase, the cleanup function sorts the URL-count pairs based on the count in
      ascending order and emits them as the final output, with each URL accompanied by its respective count. This is
      done using a TreeMap.
    - Output File: .../1/part-r-00000

2. Request count for each HTTP response code, sorted by response code (ascending)
    - Run Command: ./gradlew run --args="2 input_access_log 2"
    - Map Phase: Map function extracts the HTTP response code from every line and emits a
      key-value pair where the http variable is the key and the value is 1.
            - The input is the access log. The output is a list of key value pairs <http, 1>.
    - Reduce Phase: The reduce function iterates over the values (all ones) and calculates the sum for each HTTP Response Code
      The output of the reduce phase is a Text key representing the hostname and a LongWritable value representing
      the total count of that http response code.
            - The input is the key value pairs <http, 1>. The output is the key value pairs <http, count>.
    - Output File: .../2/part-r-00000

3. Total bytes sent to the client with a specified hostname or IPv4 address (you may hard code an address)
    - Run Command: ./gradlew run --args="3 input_access_log 3"
    - Map Phase: A client address is hardcoded into the function. This function extracts all the hostnames/IPv4 addresses
      and compares them to the hardcoded address. If there is a match, the client is mapped along with their byte count.
              - The input is the access Log. The output is the key value pairs <client, byteCount>.
    - Reduce Phase: The reduce phase takes all clients with the same hostname, sums their byte counts, and writes
      to the file
              - The input is the key value pairs <client, byteCount>.  The output is the key value pairs <client, totalByteCount>.
    - Output File: .../3/part-r-00000

4. Based on a given URL (hard coded), compute a request count for each client (hostname or IPv4) who accessed that URL,
   sorted by request count (ascending)
    - Run Command: ./gradlew run --args="4 input_access_log 5"
    - Map Phase: A URL is hardcoded into the function. This function extracts all URLs and their corresponding counts
    for each client.
              - The input is the access Log. The output is the key value pairs <client, 1>.
    - Reduce Phase: The reduce phase then sums up all the counts for each client for the specified URL and maps it
      to a treemap.
              - The input is the key value pairs <client, 1>.  The output is the key value pairs <client, count>.
    - Cleanup Phase: The cleanup function sorts the clients by request count in ascending order and emits the final
      output. This is done using a treemap.
    - Output File: .../4/part-r-00000

5. Request count for each calendar month and year, sorted chronologically
    - Run Command: ./gradlew run --args="5 input_access_log 5"
    - Map Phase: The map phase extracts all the dates, removes the substrings containing the month/year, and
      it assigns each month/year pair a value of 1.
              - The input is the access Log. The output is the key value pairs <month/year, 1>.
    - Reduce Phase: The reduce phase sums up all counts for each calendar/month pair and outputs it into the file.
              - The input is the key value pairs <client, 1>. The output is the key value pairs <client, count>.
    - Output File: .../5/part-r-00000

6. For each calendar day that appears in the file, return total bytes sent. Sort by total bytes in ascending order.
    - Run Command: ./gradlew run --args="6 input_access_log 6"
    - Map Phase: This function extracts the date/time for each line. It reformats the dates to be per day, taking
      into consideration the month and year as well. It then maps each day with it's corresponding byte count.
              - The input is the access Log. The output is the key value pairs <day (month, day, year), byteCount>.
    - Reduce Phase: For each day, the byte count is summed up.
                  - The input is the key value pairs <day (month, day, year), byteCount>. The output is the key value pairs <day (month, day, year), totalByteCount>
    - Cleanup Phase: The cleanup function sorts the days by byte countin ascending order and emits the final
      output. This is done using a treemap.
    - Output File: .../6/part-r-00000


